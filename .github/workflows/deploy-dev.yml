name: Deploy to Dev Server

on:
  push:
    branches:
      - main

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/*.gradle.kts', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build and run unit tests
        run: ./gradlew clean test --no-daemon --no-build-cache

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build JAR
        run: ./gradlew clean build -x test --no-daemon
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest
      - name: Build and run Docker Compose
        run: |
          docker compose -f docker-compose.test.yaml up -d
          sleep 240
          for i in {1..30}; do
            if curl -s http://localhost:8080/api/v2/health/check | grep -q '"OK"'; then
              echo "Application is up!"
              exit 0
            fi
            echo "Waiting for application... ($i/30)"
            sleep 2
          done
          echo "Application failed to start"
          exit 1
      - name: Run Integration Tests
        run: ./gradlew clean integrationTest --info --stacktrace
      - name: Stop Docker Compose
        if: always()
        run: docker compose -f docker-compose.test.yaml down
      - name: Upload Test Reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: build/reports/tests/integrationTest/
      - name: Upload Docker Logs
        if: failure()
        run: docker compose -f docker-compose.test.yaml logs > docker-logs.txt
      - name: Upload Docker Logs Artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: docker-logs.txt

  deploy:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Connect deploy key
        uses: cloudtype-github-actions/connect@v1
        with:
          token: ${{ secrets.CLOUDTYPE_TOKEN }}
          ghtoken: ${{ secrets.GHP_TOKEN }}
      - name: Deploy
        uses: cloudtype-github-actions/deploy@v1
        with:
          token: ${{ secrets.CLOUDTYPE_TOKEN }}
          project: suuuuuuminnnnnn/gsmc-server-v2
          stage: main
          yaml: |
            name: gsmc-server-v2
            app: java@21
            options:
              ports: "8080"
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: JPA_DDL_AUTO
                  value: ${{ secrets.JPA_DDL_AUTO }}
                - name: SERVER_PORT
                  value: ${{ secrets.SERVER_PORT }}
                - name: AWS_ACCESS_KEY_ID
                  value: ${{ secrets.AWS_ACCESS_KEY_ID }}
                - name: AWS_SECRET_ACCESS_KEY
                  value: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                - name: AWS_REGION
                  value: ${{ secrets.AWS_REGION }}
                - name: AWS_S3_BUCKET
                  value: ${{ secrets.AWS_S3_BUCKET }}
                - name: JWT_ACCESS_TOKEN_SECRET
                  value: ${{ secrets.JWT_ACCESS_TOKEN_SECRET }}
                - name: JWT_ACCESS_TOKEN_EXPIRATION
                  value: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
                - name: JWT_REFRESH_TOKEN_SECRET
                  value: ${{ secrets.JWT_REFRESH_TOKEN_SECRET }}
                - name: JWT_REFRESH_TOKEN_EXPIRATION
                  value: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
                - name: EMAIL_HOST
                  value: ${{ secrets.EMAIL_HOST }}
                - name: EMAIL_USERNAME
                  value: ${{ secrets.EMAIL_USERNAME }}
                - name: EMAIL_PASSWORD
                  value: ${{ secrets.EMAIL_PASSWORD }}
                - name: EMAIL_TTL
                  value: ${{ secrets.EMAIL_TTL }}
                - name: RDB_TYPE
                  value: ${{ secrets.RDB_TYPE }}
                - name: RDB_HOST
                  value: ${{ secrets.RDB_HOST }}
                - name: RDB_PORT
                  value: ${{ secrets.RDB_PORT }}
                - name: RDB_SCHEMA
                  value: ${{ secrets.RDB_SCHEMA }}
                - name: RDB_USERNAME
                  value: ${{ secrets.RDB_USERNAME }}
                - name: RDB_PASSWORD
                  value: ${{ secrets.RDB_PASSWORD }}
                - name: REDIS_HOST
                  value: ${{ secrets.REDIS_HOST }}
                - name: REDIS_PORT
                  value: ${{ secrets.REDIS_PORT }}
              buildenv: []
            context:
              git:
                url: git@github.com:${{ github.repository }}.git
                ref: ${{ github.ref }}