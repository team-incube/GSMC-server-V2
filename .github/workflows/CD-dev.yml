name: GSMC CD(Dev)

on:
  push:
    branches:
      - develop

jobs:
  Unit-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/*.gradle.kts', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build and run unit tests
        run: ./gradlew clean test --no-daemon --no-build-cache

  Integration-Test:
    runs-on: ubuntu-latest
    needs: Unit-Test
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build JAR
        run: ./gradlew clean build -x test --no-daemon

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and run Docker Compose
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 120
          for i in {1..30}; do
            if curl -s http://localhost:8080/api/v2/health/check | grep -q '"OK"'; then
              echo "Application is up!"
              exit 0
            fi
            echo "Waiting for application... ($i/30)"
            sleep 2
          done
          echo "Application failed to start"
          exit 1

      - name: Stop Docker Compose
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  CD-dev:
    runs-on: ubuntu-latest
    needs: Integration-Test
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Connect deploy key
        uses: cloudtype-github-actions/connect@v1
        with:
          token: ${{ secrets.CLOUDTYPE_TOKEN }}
          ghtoken: ${{ secrets.GHP_TOKEN }}

      - name: Deploy
        uses: cloudtype-github-actions/deploy@v1
        with:
          token: ${{ secrets.CLOUDTYPE_TOKEN }}
          project: suuuuuuminnnnnn/gsmc-server-v2
          stage: main
          yaml: |
            name: gsmc-server-v2
            app: java@21
            options:
              ports: "8080"
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: JPA_DDL_AUTO
                  value: ${{ secrets.JPA_DDL_AUTO }}
                - name: SERVER_PORT
                  value: ${{ secrets.SERVER_PORT }}
                - name: AWS_ACCESS_KEY_ID
                  value: ${{ secrets.AWS_ACCESS_KEY_ID }}
                - name: AWS_SECRET_ACCESS_KEY
                  value: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                - name: AWS_REGION
                  value: ${{ secrets.AWS_REGION }}
                - name: AWS_S3_BUCKET
                  value: ${{ secrets.AWS_S3_BUCKET }}
                - name: JWT_ACCESS_TOKEN_SECRET
                  value: ${{ secrets.JWT_ACCESS_TOKEN_SECRET }}
                - name: JWT_ACCESS_TOKEN_EXPIRATION
                  value: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}
                - name: JWT_REFRESH_TOKEN_SECRET
                  value: ${{ secrets.JWT_REFRESH_TOKEN_SECRET }}
                - name: JWT_REFRESH_TOKEN_EXPIRATION
                  value: ${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}
                - name: EMAIL_HOST
                  value: ${{ secrets.EMAIL_HOST }}
                - name: EMAIL_USERNAME
                  value: ${{ secrets.EMAIL_USERNAME }}
                - name: EMAIL_PASSWORD
                  value: ${{ secrets.EMAIL_PASSWORD }}
                - name: EMAIL_TTL
                  value: ${{ secrets.EMAIL_TTL }}
                - name: RDB_TYPE
                  value: ${{ secrets.RDB_TYPE }}
                - name: RDB_HOST
                  value: ${{ secrets.RDB_HOST }}
                - name: RDB_PORT
                  value: ${{ secrets.RDB_PORT }}
                - name: RDB_SCHEMA
                  value: ${{ secrets.RDB_SCHEMA }}
                - name: RDB_USERNAME
                  value: ${{ secrets.RDB_USERNAME }}
                - name: RDB_PASSWORD
                  value: ${{ secrets.RDB_PASSWORD }}
                - name: REDIS_HOST
                  value: ${{ secrets.REDIS_HOST }}
                - name: REDIS_PORT
                  value: ${{ secrets.REDIS_PORT }}
              buildenv: []
            context:
              git:
                url: git@github.com:${{ github.repository }}.git
                ref: ${{ github.ref }}

      - name: Notify Discord on Success
        if: success()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "embeds": [{
                   "title": "üöÄ Development Deployment Successful",
                   "description": "GSMC Server V2 has been successfully deployed to development environment",
                   "color": 5763719,
                   "fields": [
                     {
                       "name": "Repository",
                       "value": "${{ github.repository }}",
                       "inline": true
                     },
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Commit",
                       "value": "[`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})",
                       "inline": true
                     },
                     {
                       "name": "Author",
                       "value": "${{ github.actor }}",
                       "inline": true
                     },
                     {
                       "name": "Environment",
                       "value": "Development (Cloudtype)",
                       "inline": false
                     },
                     {
                       "name": "Tests Passed",
                       "value": "‚úÖ Unit Tests\n‚úÖ Integration Tests",
                       "inline": true
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               $DISCORD_WEBHOOK

      - name: Notify Discord on Failure
        if: failure()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "embeds": [{
                   "title": "‚ùå Development Deployment Failed",
                   "description": "GSMC Server V2 deployment to development environment has failed",
                   "color": 15158332,
                   "fields": [
                     {
                       "name": "Repository",
                       "value": "${{ github.repository }}",
                       "inline": true
                     },
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Commit",
                       "value": "[`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})",
                       "inline": true
                     },
                     {
                       "name": "Author",
                       "value": "${{ github.actor }}",
                       "inline": true
                     },
                     {
                       "name": "Environment",
                       "value": "Development (Cloudtype)",
                       "inline": false
                     },
                     {
                       "name": "Workflow Run",
                       "value": "[${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})",
                       "inline": false
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
                 }]
               }' \
               $DISCORD_WEBHOOK